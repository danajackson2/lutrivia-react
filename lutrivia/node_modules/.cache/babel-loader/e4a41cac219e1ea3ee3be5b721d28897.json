{"ast":null,"code":"var _jsxFileName = \"/Users/danajackson/Flatiron/code-challenge-practice/lutrivia-react/lutrivia/src/App.js\";\nimport React from 'react';\nimport NewGameButton from './NewGameButton';\nimport Game from './Game';\nimport Scoreboard from './Scoreboard';\nimport data from './data';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questionList: data.questions,\n      scores: []\n    };\n\n    this.get3Questions = () => {\n      return [data.questions[Math.floor(Math.random() * 10)], data.questions[Math.floor(Math.random() * 10)], data.questions[Math.floor(Math.random() * 10)]];\n    };\n\n    this.endGame = gameData => {\n      console.log(newQ);\n      this.setState(prevState => {\n        return {\n          scores: prevState.scores.concat(gameData)\n        };\n      });\n      this.setState({\n        questionList: newQ\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"Lutrivia\"), React.createElement(NewGameButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }), React.createElement(Game, {\n      questions: this.state.questionList,\n      endGame: this.endGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(Scoreboard, {\n      scores: this.state.scores,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/danajackson/Flatiron/code-challenge-practice/lutrivia-react/lutrivia/src/App.js"],"names":["React","NewGameButton","Game","Scoreboard","data","App","Component","state","questionList","questions","scores","get3Questions","Math","floor","random","endGame","gameData","console","log","newQ","setState","prevState","concat","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GAC1B;AACJC,MAAAA,YAAY,EAAEJ,IAAI,CAACK,SADf;AAEJC,MAAAA,MAAM,EAAE;AAFJ,KAD0B;;AAAA,SAMhCC,aANgC,GAMhB,MAAM;AACpB,aAAO,CAACP,IAAI,CAACK,SAAL,CAAeG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAf,CAAD,EAAiDV,IAAI,CAACK,SAAL,CAAeG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAf,CAAjD,EAAiGV,IAAI,CAACK,SAAL,CAAeG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAf,CAAjG,CAAP;AACD,KAR+B;;AAAA,SAUhCC,OAVgC,GAUrBC,QAAD,IAAc;AAGtBC,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACA,WAAKC,QAAL,CAAcC,SAAS,IAAI;AAAC,eAAO;AAACX,UAAAA,MAAM,EAAEW,SAAS,CAACX,MAAV,CAAiBY,MAAjB,CAAwBN,QAAxB;AAAT,SAAP;AAAmD,OAA/E;AACA,WAAKI,QAAL,CAAc;AAACZ,QAAAA,YAAY,EAAEW;AAAf,OAAd;AACD,KAhB+B;AAAA;;AAkBhCI,EAAAA,MAAM,GAAE;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAE,KAAKhB,KAAL,CAAWC,YAA5B;AAA0C,MAAA,OAAO,EAAE,KAAKO,OAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAE,KAAKR,KAAL,CAAWG,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF;AAQD;;AA3B+B;;AA8BlC,eAAeL,GAAf","sourcesContent":["import React from 'react';\nimport NewGameButton from './NewGameButton'\nimport Game from './Game'\nimport Scoreboard from './Scoreboard'\nimport data from './data'\n\nclass App extends React.Component {\n  state={\n    questionList: data.questions,\n    scores: []\n  }\n\n  get3Questions = () => {\n    return [data.questions[Math.floor(Math.random() * 10)], data.questions[Math.floor(Math.random() * 10)], data.questions[Math.floor(Math.random() * 10)]]\n  }\n\n  endGame = (gameData) => {\n\n    \n    console.log(newQ)\n    this.setState(prevState => {return {scores: prevState.scores.concat(gameData)}})\n    this.setState({questionList: newQ})\n  }\n\n  render(){\n    return (\n      <div>\n        <h1>Lutrivia</h1>\n        <NewGameButton />\n        <Game questions={this.state.questionList} endGame={this.endGame}/>\n        <Scoreboard scores={this.state.scores}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}