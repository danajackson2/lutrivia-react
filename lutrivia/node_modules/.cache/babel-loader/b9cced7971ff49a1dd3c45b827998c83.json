{"ast":null,"code":"var _jsxFileName = \"/Users/danajackson/Flatiron/code-challenge-practice/lutrivia-react/lutrivia/src/App.js\";\nimport React from 'react';\nimport NewGameButton from './NewGameButton';\nimport Game from './Game';\nimport Scoreboard from './Scoreboard';\nimport data from './data';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questionList: data.questions.slice(0, 3),\n      scores: []\n    };\n\n    this.endGame = data => {\n      this.setState(prevState => {\n        return {\n          scores: prevState.scores.concat(data)\n        };\n      }); // this.setState({questionList: data.questions})\n    };\n  }\n\n  // getNewQuestions = () => {\n  //   let newQ = [data.questions[Math.floor(Math.random() * 10)], data.questions[Math.floor(Math.random() * 10)], data.questions[Math.floor(Math.random() * 10)]]\n  //   this.setState({questionList: newQ})\n  // }\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Lutrivia\"), React.createElement(NewGameButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }), React.createElement(Game, {\n      questions: this.state.questionList,\n      endGame: this.endGame,\n      getNewQuestions: this.getNewQuestions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }), React.createElement(Scoreboard, {\n      scores: this.state.scores,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/danajackson/Flatiron/code-challenge-practice/lutrivia-react/lutrivia/src/App.js"],"names":["React","NewGameButton","Game","Scoreboard","data","App","Component","state","questionList","questions","slice","scores","endGame","setState","prevState","concat","render","getNewQuestions"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GAC1B;AACJC,MAAAA,YAAY,EAAEJ,IAAI,CAACK,SAAL,CAAeC,KAAf,CAAqB,CAArB,EAAwB,CAAxB,CADV;AAEJC,MAAAA,MAAM,EAAE;AAFJ,KAD0B;;AAAA,SAMhCC,OANgC,GAMrBR,IAAD,IAAU;AAClB,WAAKS,QAAL,CAAcC,SAAS,IAAI;AAAC,eAAO;AAACH,UAAAA,MAAM,EAAEG,SAAS,CAACH,MAAV,CAAiBI,MAAjB,CAAwBX,IAAxB;AAAT,SAAP;AAA+C,OAA3E,EADkB,CAElB;AACD,KAT+B;AAAA;;AAWhC;AACA;AACA;AACA;AAEAY,EAAAA,MAAM,GAAE;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAE,KAAKT,KAAL,CAAWC,YAA5B;AAA0C,MAAA,OAAO,EAAE,KAAKI,OAAxD;AAAiE,MAAA,eAAe,EAAE,KAAKK,eAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAE,KAAKV,KAAL,CAAWI,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF;AAQD;;AAzB+B;;AA4BlC,eAAeN,GAAf","sourcesContent":["import React from 'react';\nimport NewGameButton from './NewGameButton'\nimport Game from './Game'\nimport Scoreboard from './Scoreboard'\nimport data from './data'\n\nclass App extends React.Component {\n  state={\n    questionList: data.questions.slice(0, 3),\n    scores: []\n  }\n\n  endGame = (data) => {\n    this.setState(prevState => {return {scores: prevState.scores.concat(data)}})\n    // this.setState({questionList: data.questions})\n  }\n\n  // getNewQuestions = () => {\n  //   let newQ = [data.questions[Math.floor(Math.random() * 10)], data.questions[Math.floor(Math.random() * 10)], data.questions[Math.floor(Math.random() * 10)]]\n  //   this.setState({questionList: newQ})\n  // }\n\n  render(){\n    return (\n      <div>\n        <h1>Lutrivia</h1>\n        <NewGameButton />\n        <Game questions={this.state.questionList} endGame={this.endGame} getNewQuestions={this.getNewQuestions}/>\n        <Scoreboard scores={this.state.scores}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}